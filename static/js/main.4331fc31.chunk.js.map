{"version":3,"sources":["actions/index.ts","services/chucknorris-api.ts","components/spinner/spinner.tsx","components/joke/joke.tsx","components/pages/main/main.tsx","components/app/app.tsx","components/error-indicator/error-indicator.tsx","components/error-boundry/error-boundry.tsx","reducers/index.ts","store.ts","index.tsx"],"names":["chuckApi","baseUrl","fetchData","URI","a","fetch","res","ok","Error","status","json","getRandomJoke","debounce","leading","getCategoriesList","getRandomJokeByCategory","query","category","getJokesByText","fetchCategories","dispatch","type","then","data","payload","categoriesLoaded","catch","err","console","log","fetchRandomJoke","randomJokeLoaded","Spinner","className","Joke","props","joke","favIds","handleFav","date","Date","updated","updated_at","hours","Math","floor","Number","includes","id","onClick","rel","target","href","url","value","categories","length","connect","state","jokes","search","fetchJokesByText","text","jokesByTextLoaded","searchValueChange","fetchJokeByCategory","cat","jokeByCategoryLoaded","makeFav","removeFav","selectCategory","useState","variant","setVariant","showMenu","setShowMenu","favourites","map","x","useEffect","localFavs","JSON","parse","window","localStorage","getItem","mode","parsed","idx","findIndex","setItem","stringify","slice","onSubmit","e","preventDefault","selected","key","onChange","currentTarget","placeholder","isLoading","App","ErrorIndicator","ErrorBoundry","hasError","this","setState","children","Component","initialState","reducer","action","result","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4331fc31.chunk.js","sourcesContent":["import { Dispatch } from \"redux\";\nimport ChuckApi, { CategoriesListResponse, JokeResponse, JokesByTextResponse } from \"../services/chucknorris-api\";\n\nconst chuckApi = new ChuckApi()\n\nexport const CATEGORIES_REQUEST = 'CATEGORIES_REQUEST'\nexport const CATEGORIES_SUCCESS = 'CATEGORIES_SUCCESS'\nexport const RANDOM_JOKE_REQUEST = 'RANDOM_JOKE_REQUEST'\nexport const RANDOM_JOKE_SUCCESS = 'RANDOM_JOKE_SUCCESS'\nexport const JOKE_BY_CATEGORY_REQUEST = 'JOKE_BY_CATEGORY_REQUEST'\nexport const JOKE_BY_CATEGORY_SUCCESS = 'JOKE_BY_CATEGORY_SUCCESS'\nexport const JOKES_BY_TEXT_REQUEST = 'JOKES_BY_TEXT_REQUEST'\nexport const JOKES_BY_TEXT_SUCCESS = 'JOKES_BY_TEXT_SUCCESS'\nexport const SEARCH_VALUE_CHANGE = 'SEARCH_VALUE_CHANGE'\nexport const SELECT_JOKE_BY_ID = 'SELECT_JOKE_BY_ID'\nexport const SELECT_CATEGORY = 'SELECT_CATEGORY'\nexport const MAKE_FAV = 'MAKE_FAV'\nexport const REMOVE_FAV = 'REMOVE_FAV'\n\ninterface CategoriesRequestAction {\n  type: typeof CATEGORIES_REQUEST\n}\n\ninterface CategoriesLoadedAction {\n  type: typeof CATEGORIES_SUCCESS,\n  payload: CategoriesListResponse\n}\n\ninterface RandomJokeRequestAction {\n  type: typeof RANDOM_JOKE_REQUEST\n}\n\ninterface RandomJokeLoadedAction {\n  type: typeof RANDOM_JOKE_SUCCESS,\n  payload: JokeResponse\n}\n\ninterface JokeByCategoryRequestAction {\n  type: typeof JOKE_BY_CATEGORY_REQUEST\n}\n\ninterface JokeByCategoryLoadedAction {\n  type: typeof JOKE_BY_CATEGORY_SUCCESS,\n  payload: JokeResponse\n}\n\ninterface JokesByTextRequestAction {\n  type: typeof JOKES_BY_TEXT_REQUEST\n}\n\ninterface JokesByTextLoadedAction {\n  type: typeof JOKES_BY_TEXT_SUCCESS,\n  payload: JokesByTextResponse\n}\n\ninterface SearchValueChange {\n  type: typeof SEARCH_VALUE_CHANGE,\n  payload: string\n}\n\ninterface SelectCategory {\n  type: typeof SELECT_CATEGORY,\n  payload: string\n}\n\ninterface MakeFav {\n  type: typeof MAKE_FAV,\n  payload: JokeResponse\n}\n\ninterface RemoveFav {\n  type: typeof REMOVE_FAV,\n  payload: string\n}\n\nexport type ActionTypes = \n    CategoriesRequestAction\n  | CategoriesLoadedAction\n  | RandomJokeRequestAction\n  | RandomJokeLoadedAction\n  | JokeByCategoryRequestAction\n  | JokeByCategoryLoadedAction\n  | JokesByTextRequestAction\n  | JokesByTextLoadedAction\n  | SearchValueChange\n  | SelectCategory\n  | MakeFav\n  | RemoveFav\n\nexport const makeFav = (joke: JokeResponse) => {\n  return {\n    type: MAKE_FAV,\n    payload: joke\n  }\n}\n\nexport const removeFav = (id: string) => {\n  return {\n    type: REMOVE_FAV,\n    payload: id\n  }\n}\n\nexport const selectCategory = (data: string) => {\n  return {\n    type: SELECT_CATEGORY,\n    payload: data\n  }\n}\n\nexport const searchValueChange = (value: string) => {\n  return {\n    type: SEARCH_VALUE_CHANGE,\n    payload: value\n  }\n}\n\nconst categoriesRequested = () => {\n  return {\n    type: CATEGORIES_REQUEST\n  }\n}\n\nconst categoriesLoaded = (data: CategoriesListResponse) => {\n  return {\n    type: CATEGORIES_SUCCESS,\n    payload: data\n  }\n}\n\nexport const fetchCategories = (dispatch: Dispatch) => () => {\n  dispatch(categoriesRequested())\n\n  chuckApi.getCategoriesList()\n    .then((data: CategoriesListResponse) => {\n      dispatch(categoriesLoaded(data))\n    })\n    .catch((err: any) => console.log(err));\n}\n\nconst randomJokeRequested = () => {\n  return {\n    type: RANDOM_JOKE_REQUEST\n  }\n}\n\nconst randomJokeLoaded = (data: JokeResponse) => {\n  return {\n    type: RANDOM_JOKE_SUCCESS,\n    payload: data\n  }\n}\n\nexport const fetchRandomJoke = (dispatch: Dispatch) => () => {\n  dispatch(randomJokeRequested())\n\n  chuckApi.getRandomJoke()\n    .then((data: JokeResponse) => {\n      dispatch(randomJokeLoaded(data))\n    })\n    .catch((err: any) => console.log(err))\n}\n\nconst jokeByCategoryRequested = () => {\n  return {\n    type: JOKE_BY_CATEGORY_REQUEST\n  }\n}\n\nconst jokeByCategoryLoaded = (data: JokeResponse) => {\n  return {\n    type: JOKE_BY_CATEGORY_SUCCESS,\n    payload: data\n  }\n}\n\nexport const fetchJokeByCategory = (dispatch: Dispatch, cat: string) => {\n  dispatch(jokeByCategoryRequested())\n  const query = {\n    category: cat\n  }\n  chuckApi.getRandomJokeByCategory(query)\n    .then((data: JokeResponse) => {\n      dispatch(jokeByCategoryLoaded(data))\n    })\n    .catch((err: any) => console.log(err))\n}\n\nconst jokesByTextRequest = () => {\n  return {\n    type: JOKES_BY_TEXT_REQUEST\n  }\n}\n\nconst jokesByTextLoaded = (data: JokesByTextResponse) => {\n  return {\n    type: JOKES_BY_TEXT_SUCCESS,\n    payload: data\n  }\n}\n\nexport const fetchJokesByText = (dispatch: Dispatch, text: string) => {\n  dispatch(jokesByTextRequest())\n  const query = {\n    query: text\n  }\n  chuckApi.getJokesByText(query)\n    .then((data: JokesByTextResponse) => {\n      dispatch(jokesByTextLoaded(data))\n    })\n    .catch((err: any) => console.log(err))\n}","import debounce from \"lodash.debounce\"\n\n/*\nGET https://api.chucknorris.io/jokes/random\n\nRetrieve a random chuck joke in JSON format.\n*/\nexport type JokeResponse = {\n  categories: string[],\n  created_at: string,\n  icon_url: string,\n  id: string,\n  updated_at: string,\n  url: string,\n  value: string\n}\n\n/* \nGET https://api.chucknorris.io/jokes/categories\n\nRetrieve a list of available categories.\n*/\n\nexport type CategoriesListResponse = string[]\n\n/* \nGET https://api.chucknorris.io/jokes/random?category={category}\n\nRetrieve a random chuck norris joke from a given category.\n*/\n\nexport type RandomJokeByCategoryQuery = {\n  category: string\n}\n\nexport type RandomJokeByCategoryResponse = JokeResponse\n\n/* \nGET https://api.chucknorris.io/jokes/search?query={query}\n\nFree text search.  \n*/\n\nexport type JokesByTextQuery = {\n  query: string\n}\n\nexport type JokesByTextResponse = {\n  total: number,\n  result: JokeResponse[]\n}\n\nexport default class ChukNorrisApiService {\n\n  baseUrl = 'https://api.chucknorris.io/jokes'\n\n  fetchData = async (URI: string) => {\n    const res = await fetch(`${this.baseUrl}${URI}`)\n    \n    if (!res.ok) {\n      throw new Error(`Could not fetch ${URI}` +\n        `, received ${res.status}`)\n    }\n    return await res.json();\n  }\n  \n  getRandomJoke = debounce(async () => {\n    return await this.fetchData('/random')\n  }, 1000, {leading: true})\n\n  getCategoriesList = async () => {\n    return await this.fetchData('/categories')\n  }\n\n  getRandomJokeByCategory = debounce(async (query: RandomJokeByCategoryQuery) => {\n    return await this.fetchData(`/random?category=${query.category}`)\n  }, 1000, {leading: true})\n\n  getJokesByText = debounce(async (query: JokesByTextQuery) => {\n    return await this.fetchData(`/search?query=${query.query}`)\n  }, 1000, {leading: true})\n}","import React from 'react'\nimport './spinner.css'\n\nconst Spinner = () => {\n  return <div className=\"loader\"></div>\n}\n\nexport default Spinner","import React from 'react'\nimport { JokeResponse } from '../../services/chucknorris-api'\n\ntype JokeProps = {\n  joke: JokeResponse\n  favIds: string[]\n  handleFav: (joke: JokeResponse, mode: 'add' | 'remove') => void\n}\n\nconst Joke = (props: JokeProps) => {\n  const { joke, favIds, handleFav } = props\n  const date =  new Date()\n  const updated = new Date(joke.updated_at)\n  const hours = Math.floor((Number(date) - Number(updated)) / 1000 / 60 / 60)\n\n  return <div className=\"joke\">\n      <div className=\"joke_content\">\n      {\n        favIds.includes(joke.id)\n          ? <div className=\"heart selected\" onClick={() => handleFav(joke, 'remove')}></div>\n          : <div className=\"heart\" onClick={() => handleFav(joke, 'add')}></div>\n      }\n      \n      <div className=\"link\">ID: <a rel=\"noopener noreferrer\" target=\"_blank\" href={joke.url}>{joke.id}</a></div>\n      \n      <div className=\"text\">{joke.value}</div>\n      <div className=\"info\">\n        <div className=\"update\">Last update: <b>{hours} hours ago</b></div>\n        { joke.categories.length > 0 && <div className=\"category\">{joke.categories[0]}</div> }\n      </div>\n    </div>\n  </div>\n}\n\nexport default Joke","import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { State, Jokes, Search, Categories } from '../../../reducers'\nimport { Dispatch } from \"redux\";\nimport { fetchCategories, fetchRandomJoke, fetchJokesByText, searchValueChange, fetchJokeByCategory, makeFav, removeFav, selectCategory } from '../../../actions';\nimport { JokeResponse } from '../../../services/chucknorris-api';\nimport './main.scss'\nimport Spinner from '../../spinner/spinner';\nimport Joke from '../../joke/joke'\n\ntype Props = {\n  jokes: Jokes,\n  search: Search,\n  categories: Categories,\n  fetchCategories: () => void,\n  fetchJokesByText: (text: string) => void,\n  searchValueChange: (text: string) => void,\n  fetchRandomJoke: () => void,\n  fetchJokeByCategory: (cat: string) => void,\n  makeFav: (joke: JokeResponse) => void,\n  removeFav: (id: string) => void,\n  selectCategory: (cat: string) => void\n}\n\ntype Variants = 'random' | 'byCategory' | 'search'\n\nconst Main = (props: Props) => {\n  const { jokes, search, categories } = props\n  const { \n    fetchCategories, \n    fetchJokesByText, \n    searchValueChange, \n    fetchRandomJoke, \n    fetchJokeByCategory,\n    makeFav,\n    removeFav,\n    selectCategory\n  } = props\n  const [ variant, setVariant ] = useState<Variants>('random')\n  const [ showMenu, setShowMenu ] = useState(false)\n  const favIds = jokes.favourites.map((x: JokeResponse) => x.id)\n\n  useEffect(() => {\n    let localFavs: JokeResponse[] = JSON.parse(window.localStorage.getItem('favs') as string)\n\n    if (localFavs && localFavs.length > 0) {\n      localFavs.map((x: JokeResponse) => makeFav(x))\n    }\n\n    fetchCategories()\n  }, [fetchCategories, makeFav])\n\n  const handleFetch = () => {\n    switch (variant) {\n      case 'random': {\n        fetchRandomJoke()\n        break\n      }\n      case 'byCategory': {\n        fetchJokeByCategory(categories.selected)\n        break\n      }\n      case 'search': {\n        fetchJokesByText(search.value)\n        break\n      }\n    }\n  }\n\n  const handleFav = (joke: JokeResponse, mode: string ) => {\n    let localFavs: JokeResponse[] = []\n    const parsed = JSON.parse(window.localStorage.getItem('favs') as string)\n    if (parsed.length > 0) localFavs = parsed\n\n    if (mode === 'remove') {\n      removeFav(joke.id)\n\n      const idx = localFavs.findIndex((x: JokeResponse) => x.id === joke.id)\n      if (idx !== -1) window.localStorage.setItem('favs', JSON.stringify([\n        ...localFavs.slice(0, idx),\n        ...localFavs.slice(idx + 1)\n      ]))\n    } else {\n      makeFav(joke)\n\n      window.localStorage.setItem('favs', JSON.stringify([\n        ...localFavs,\n        joke\n      ]))\n    }\n  }\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n  }\n\n  return <div className=\"jokes_wrapper\">\n    <div className=\"row_block\">\n      <div className=\"main_block\">\n        <div className=\"msi\">\n          <span>MSI 2020</span>\n          <div className=\"fav_menu\" onClick={() => setShowMenu(!showMenu)}>Favourite</div>\n        </div>\n        <h2>Hey!</h2>\n        <h3>Let’s try to find a joke for you:</h3>\n        <form onSubmit={handleSubmit}>\n        <div className=\"variants\">\n          <div className={`variant ${variant === 'random' ? 'selected' : ''}`} onClick={() => setVariant('random')}>Random</div>\n          <div className={`variant ${variant === 'byCategory' ? 'selected' : ''}`} onClick={() => setVariant('byCategory')}>From Categories</div>\n          {\n            variant === 'byCategory' && categories.value.map((x: string) => <div \n              className={`category ${categories.selected === x ? 'selected' : ''}`} \n              key={x} \n              onClick={() => selectCategory(x)}>\n                {x}\n              </div>)\n          }\n          <div className={`variant ${variant === 'search' ? 'selected' : ''}`} onClick={() => setVariant('search')}>Search</div>\n          {\n            variant === 'search' &&\n              <input value={search.value} onChange={(e) => searchValueChange(e.currentTarget.value)} placeholder=\"Free text search...\" />\n          }\n        </div>\n        <button type=\"submit\" onClick={handleFetch}>Get a joke</button>\n        </form>\n        <div className=\"jokes\">\n        { jokes.isLoading && <Spinner /> }\n        {\n          jokes.value.map((x: JokeResponse) => <Joke key={x.id} joke={x} favIds={favIds} handleFav={handleFav} />)\n        }\n        </div>\n      </div>\n      <div className={`fav_block ${showMenu ? 'open' : ''}`}>\n        \n        <div className=\"head\">\n          <h2>Favourite</h2>\n          <div className=\"fav_menu\" onClick={() => setShowMenu(!showMenu)}>Favourite</div>\n        </div>\n        \n        <div className=\"jokes\">\n        { \n          jokes.favourites.map((x: JokeResponse) => <Joke key={x.id} joke={x} favIds={favIds} handleFav={handleFav} />)\n        }\n        </div>\n      </div>\n    </div>\n  </div>\n}\n\nconst mapStateToProps = (state: State) => {\n  return {\n    jokes: state.jokes,\n    search: state.search,\n    categories: state.categories\n  }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    fetchCategories: fetchCategories(dispatch),\n    fetchRandomJoke: fetchRandomJoke(dispatch),\n    fetchJokesByText: (text: string) => fetchJokesByText(dispatch, text),\n    searchValueChange: (text: string) => dispatch(searchValueChange(text)),\n    fetchJokeByCategory: (cat: string) => fetchJokeByCategory(dispatch, cat),\n    makeFav: (joke: JokeResponse) => dispatch(makeFav(joke)),\n    removeFav: (id: string) => dispatch(removeFav(id)),\n    selectCategory: (cat: string) => dispatch(selectCategory(cat))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Main)","import React from 'react'\nimport './app.css';\nimport Main from '../pages/main/main';\n\nconst App = () => {\n  return (\n    <div className='main'>\n      <Main />\n    </div>\n  );\n};\n\nexport default App;","import React from 'react'\n\nconst ErrorIndicator = () => {\n  return <div>Error!</div>;\n};\n\nexport default ErrorIndicator","import React, { Component } from 'react'\nimport ErrorIndicator from '../error-indicator/error-indicator'\n\nexport default class ErrorBoundry extends Component {\n\n  state = {\n    hasError: false\n  };\n\n  componentDidCatch() {\n    this.setState({ hasError: true })\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <ErrorIndicator />\n    }\n\n    return this.props.children\n  }\n}","import { ActionTypes, CATEGORIES_REQUEST, CATEGORIES_SUCCESS, RANDOM_JOKE_REQUEST, RANDOM_JOKE_SUCCESS, JOKE_BY_CATEGORY_REQUEST, JOKE_BY_CATEGORY_SUCCESS, JOKES_BY_TEXT_REQUEST, JOKES_BY_TEXT_SUCCESS, SEARCH_VALUE_CHANGE, SELECT_CATEGORY, MAKE_FAV, REMOVE_FAV } from \"../actions\";\nimport { JokeResponse, CategoriesListResponse } from '../services/chucknorris-api'\n\n\nconst initialState = {\n  categories: {\n    value: [] as CategoriesListResponse,\n    selected: '',\n    isLoading: false\n  },\n  jokes: {\n    value: [] as JokeResponse[],\n    favourites: [] as JokeResponse[],\n    isLoading: false\n  },\n  search: {\n    value: ''\n  }\n};\n\nexport type State = typeof initialState\nexport type Jokes = typeof initialState.jokes\nexport type Categories = typeof initialState.categories\nexport type Search = typeof initialState.search\n\nconst reducer = (state = initialState, action: ActionTypes) => {\n\n  switch (action.type) {\n    case SEARCH_VALUE_CHANGE: {\n      return {\n        ...state, search: {\n          ...state.search,\n          value: action.payload\n        }\n      }\n    }\n    case SELECT_CATEGORY: {\n      return {\n        ...state, categories: {\n          ...state.categories,\n          selected: action.payload\n        }\n      }\n    }\n    case CATEGORIES_REQUEST: {\n      return {\n        ...state, categories: {\n          ...state.categories,\n          isLoading: true\n        }\n      }\n    }\n    case CATEGORIES_SUCCESS: {\n      return {\n        ...state, categories: {\n          ...state.categories,\n          value: action.payload,\n          isLoading: false\n        }\n      }\n    }\n    case RANDOM_JOKE_REQUEST: {\n      return {\n        ...state, jokes: {\n          ...state.jokes,\n          isLoading: true\n        }\n      }\n    }\n    case RANDOM_JOKE_SUCCESS: {\n      return {\n        ...state, jokes: {\n          ...state.jokes,\n          value: [\n            action.payload\n          ],\n          isLoading: false\n        }\n      }\n    }\n    case JOKE_BY_CATEGORY_REQUEST: {\n      return {\n        ...state, jokes: {\n          ...state.jokes,\n          isLoading: true\n        }\n      }\n    }\n    case JOKE_BY_CATEGORY_SUCCESS: {\n      return {\n        ...state, jokes: {\n          ...state.jokes,\n          value: [\n            action.payload\n          ],\n          isLoading: false\n        }\n      }\n    }\n    case JOKES_BY_TEXT_REQUEST: {\n      return {\n        ...state, jokes: {\n          ...state.jokes,\n          isLoading: true\n        }\n      }\n    }\n    case JOKES_BY_TEXT_SUCCESS: {\n      return {\n        ...state, jokes: {\n          ...state.jokes,\n          value: action.payload.result,\n          isLoading: false\n        }\n      }\n    }\n    case MAKE_FAV: {\n      return {\n        ...state, jokes: {\n          ...state.jokes,\n          favourites: [\n            ...state.jokes.favourites,\n            action.payload\n          ]\n        }\n      }\n    }\n    case REMOVE_FAV: {\n      const idx = state.jokes.favourites.findIndex((x: JokeResponse) => x.id === action.payload)\n      if (idx === -1) return state\n      return {\n        ...state, jokes: {\n          ...state.jokes,\n          favourites: [\n            ...state.jokes.favourites.slice(0, idx),\n            ...state.jokes.favourites.slice(idx + 1),\n          ]\n        }\n      }\n    }\n    default:\n      return state\n  }\n};\n\nexport default reducer","import { createStore } from 'redux';\n\nimport reducer from './reducers';\n\nconst store = createStore(reducer);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './components/app/app';\nimport ErrorBoundry from './components/error-boundry/error-boundry';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <ErrorBoundry>\n      <App />\n    </ErrorBoundry>\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}